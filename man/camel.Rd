% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/methods-camel.R,
%   R/methods-upperCamel.R
\docType{methods}
\name{camel}
\alias{camel}
\alias{upperCamel}
\alias{camel}
\alias{camel,ANY-method}
\alias{camel,character-method}
\alias{camel,data.frame-method}
\alias{camel,DataFrame-method}
\alias{camel,factor-method}
\alias{camel,list-method}
\alias{camel,matrix-method}
\alias{camel,tbl_df-method}
\alias{upperCamel,ANY-method}
\alias{upperCamel,character-method}
\alias{upperCamel,data.frame-method}
\alias{upperCamel,DataFrame-method}
\alias{upperCamel,factor-method}
\alias{upperCamel,list-method}
\alias{upperCamel,matrix-method}
\alias{upperCamel,tbl_df-method}
\title{Camel Case}
\usage{
camel(object, ...)

upperCamel(object, ...)

\S4method{camel}{ANY}(object, rownames = FALSE, strict = FALSE)

\S4method{camel}{character}(object, strict = FALSE)

\S4method{camel}{data.frame}(object, rownames = FALSE, strict = FALSE)

\S4method{camel}{DataFrame}(object, rownames = FALSE, strict = FALSE)

\S4method{camel}{factor}(object, strict = FALSE)

\S4method{camel}{list}(object, strict = FALSE)

\S4method{camel}{matrix}(object, rownames = FALSE, strict = FALSE)

\S4method{camel}{tbl_df}(object, strict = FALSE)

\S4method{upperCamel}{ANY}(object, rownames = FALSE, strict = FALSE)

\S4method{upperCamel}{character}(object, strict = FALSE)

\S4method{upperCamel}{data.frame}(object, rownames = FALSE, strict = FALSE)

\S4method{upperCamel}{DataFrame}(object, rownames = FALSE, strict = FALSE)

\S4method{upperCamel}{factor}(object, strict = FALSE)

\S4method{upperCamel}{list}(object, strict = FALSE)

\S4method{upperCamel}{matrix}(object, rownames = FALSE, strict = FALSE)

\S4method{upperCamel}{tbl_df}(object, strict = FALSE)
}
\arguments{
\item{object}{Character vector or an object for which \code{\link[=names]{names()}} assignment
will be meaningful.}

\item{...}{\emph{Additional arguments (for the S4 generic definition).}}

\item{rownames}{Apply sanitization on row names. This is not recommended
by default, since rownames commonly contain gene identifiers that should
not be modified.}

\item{strict}{Enforce strict name sanitization. When \code{TRUE}, this does not
allow the return of any capitalized acronyms. "RNA" will become "Rna", for
example.}
}
\value{
Object with syntatically valid names. For objects supporting
\code{\link[base:names]{base::names()}}, the underlying data returns unchanged.
}
\description{
Camel Case
}
\details{
For unnamed character vectors, this function will sanitize the
underlying values. Otherwise, it will set \code{\link[=names]{names()}} and/or \code{\link[=rownames]{rownames()}} on
objects supporting name assignments. They return the object without
modification of the underlying data.
}
\examples{
loadRemoteData("http://basejump.seq.cloud/makeNames.rda")

# Character vector
print(makeNames$vec)
camel(makeNames$vec)
upperCamel(makeNames$vec)

# Named character vector
camel(makeNames$namedVec)
upperCamel(makeNames$vec)

# data.frame
camel(makeNames$df)
camel(makeNames$df, rownames = TRUE)

# Named list
camel(makeNames$lst)
}
