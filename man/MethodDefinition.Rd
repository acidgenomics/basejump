% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MethodDefinition.R
\name{MethodDefinition}
\alias{MethodDefinition}
\alias{methodFunction}
\alias{methodFormals}
\alias{hasLocal}
\alias{extractLocal}
\title{Access to the Data Inside an S4 Method Definition}
\usage{
methodFunction(f, signature, package)

methodFormals(f, signature, package)

hasLocal(definition)

extractLocal(definition)
}
\arguments{
\item{f}{a generic function or the character-string name of one.}

\item{signature}{the signature of classes to match to the arguments
    of \code{f}.  See the details below.}

\item{package}{\code{string}. Package name.}

\item{definition}{ A function definition, which will become the method
    called when the arguments in a call to \code{f} match the
    classes in \code{signature}, directly or through inheritance.
    The definition must be a function with the same formal arguments
    as the generic; however, \code{setMethod()} will handle methods
    that add arguments, if \code{\dots} is a formal argument to the generic.
  See the Details section.
  }
}
\value{
\itemize{
\item \code{\link[=methodFormals]{methodFormals()}}: \code{list}. Extract the sealed formal arguments.
\item \code{\link[=methodFunction]{methodFunction()}}: \code{function}. Extract the sealed function.
}
}
\description{
Access to the Data Inside an S4 Method Definition
}
\examples{
library(methods)
library(BiocGenerics)

f <- "as.data.frame"
signature <- "ANY"

## Function.
x <- methodFunction(f = f, signature = signature)
class(x)
formals(x)

## Formals.
x <- methodFormals(f = f, signature = signature)
class(x)
print(x)
}
\seealso{
\itemize{
\item Modified version of \href{https://goo.gl/ymX571}{John Chambers' code}.
\item \code{help(topic = "MethodDefinition-class", package = "methods")}.
\item \code{\link[methods:selectMethod]{methods::selectMethod()}}, \code{\link[methods:setMethod]{methods::setMethod()}}.
}
}
