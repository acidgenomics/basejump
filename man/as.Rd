% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coercion.R
\name{as}
\alias{as}
\alias{coerce,sparseMatrix,DataFrame-method}
\alias{coerce,tbl_df,DataFrame-method}
\alias{coerce,sparseMatrix,data.frame-method}
\alias{coerce,DataFrame,tbl_df-method}
\alias{coerce,GRanges,tbl_df-method}
\title{Force an Object to Belong to a Class}
\value{
Object of new class.
}
\description{
Coerce an object to a given class.
}
\section{list}{



It is often useful to coerce an S4 object to a flat \code{list} for archival
storage. Here we are providing the \code{\link[=coerceS4ToList]{coerceS4ToList()}} function, which
consistently coerces the slots in any S4 to a standard \code{list}. Additionally,
here we have improved support for \code{SummarizedExperiment} to \code{list} coercion,
returning the slots as a \code{list}.

}

\section{tibble}{



Coerce an object to a \href{{https://tibble.tidyverse.org/}{tibble}} (\code{tbl_df}) data frame using either S3 or S4
methods:
\itemize{
\item S3: \code{as_tibble(x)} (or \code{as_tibble()} alias).
\item S4: \code{as(object, Class = "tbl_df")}.
}

Tibbles don't support row name assignment, so here we are ensuring they are
kept by moving them to a column named \code{rowname} by default. This helps avoid
downstream unexpected data loss when using the dplyr chain of single table
verbs, such as \code{\link[dplyr:arrange]{dplyr::arrange()}}, \code{\link[dplyr:filter]{dplyr::filter()}}, or \code{\link[dplyr:mutate]{dplyr::mutate()}}.

This behavior can be overriden in the S3 method by setting \code{rowname = NULL}
instead, which is the current default in the tibble package. The S4 coercion
method doesn't support arguments, and therefore always attempts to move
rownames automatically, if defined.

Conversely, when coercing a \code{tibble} back to an S4 \code{DataFrame}, our
\code{as(tbl_df, Class = "DataFrame")} method looks for the \code{rowname} column and
will attempt to move it back to \code{\link[base:rownames]{base::rownames()}} automatically, unless
there are duplicates present.

}

\section{Description}{


    \code{as(object)}
      returns the version of this object coerced to be the given
      \code{Class}.  When used in the replacement form on the left of
      an assignment, the portion of the object corresponding to
      \code{Class} is replaced by \code{value}.

      The operation of \code{as()} in either form depends on the
      definition of coerce methods.  Methods are defined automatically
      when the two classes are related by inheritance; that is, when
      one of the classes is a subclass of the other.

      Coerce methods are also predefined for basic classes (including all
      the types of vectors, functions and a few others).

      Beyond these two sources of methods, further methods are defined
      by calls to the \code{\link{setAs}} function.  See that
      documentation also for details of how coerce methods work. Use
      \code{showMethods(coerce)} for a list of all currently defined methods, as in the
      example below.

 
  

}

\section{Basic Coercion Methods}{


  Methods are pre-defined for coercing any object to one of the basic
  datatypes.  For example, \code{as(x, "numeric")} uses the existing
  \code{as.numeric} function.  These and all other existing methods
  can be listed as shown in the example.


}

\examples{
data(rse, package = "basejump.data")

## DataFrame to tbl_df ====
data <- SummarizedExperiment::colData(rse)
print(data)

x <- as(data, "tbl_df")
print(x)

x <- as_tibble(data)
print(x)

## GRanges to tbl_df ====
data <- SummarizedExperiment::rowRanges(rse)

x <- as(data, "tbl_df")

x <- as_tibble(data)
colnames(x)

## sparseMatrix to data.frame ====
data(sparse, package = "basejump.data")

x <- as.data.frame(sparse)
class(x)

x <- as(sparse, "data.frame")
class(x)

## tbl_df to DataFrame ====
data <- as_tibble(datasets::iris)

x <- as(data, "DataFrame")
}
\references{
Chambers, John M. (2016)
 \emph{Extending R},
  Chapman & Hall.
(Chapters 9 and 10.)
}
\seealso{
\itemize{
\item \code{\link[methods:as]{methods::as()}}.
\item \code{\link[methods:canCoerce]{methods::canCoerce()}}.
\item \code{\link[methods:showMethods]{methods::showMethods()}}.
\item \code{\link[utils:methods]{utils::methods()}}.
}
}
