% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combine-methods.R
\docType{methods}
\name{combine}
\alias{combine}
\alias{combine,SummarizedExperiment,SummarizedExperiment-method}
\alias{combine,SingleCellExperiment,SingleCellExperiment-method}
\title{Combining or merging different Bioconductor data structures}
\usage{
combine(x, y, ...)

\S4method{combine}{SummarizedExperiment,SummarizedExperiment}(x, y)

\S4method{combine}{SingleCellExperiment,SingleCellExperiment}(x, y)
}
\arguments{
\item{x}{One of the values.}

\item{y}{A second value.}

\item{...}{Additional arguments.}
}
\value{
\code{SummarizedExperiment}.
}
\description{
The \code{combine} generic function handles methods for combining
  or merging different Bioconductor data structures.
  It should, given an arbitrary number of arguments of the same class
  (possibly by inheritance), combine them into a single instance in
  a sensible way (some methods may only combine 2 objects,
  ignoring \code{...} in the argument list; because Bioconductor
  data structures are complicated, check carefully that \code{combine}
  does as you intend).
}
\details{
There are two basic combine strategies. One is an intersection
  strategy. The returned value should only have rows (or columns) that
  are found in all input data objects. The union strategy says that the
  return value will have all rows (or columns) found in any one of the
  input data objects (in which case some indication of what to use for
  missing values will need to be provided).

  These functions and methods are currently under construction. Please
  let us know if there are features that you require.
}
\note{
We're attempting to make this as strict as possible, requiring:
\itemize{
\item Rows (genes) across objects must be identical.
\item \link[SummarizedExperiment:rowRanges]{rowRanges} and/or
\link[SummarizedExperiment:rowData]{rowData}
\link[S4Vectors:metadata]{metadata} must be identical.
\item \link[SummarizedExperiment:colData]{colData} must contain the same columns.
\item Specific metadata must be identical (see \code{metadata} argument).
}
}
\section{Methods}{

  The following methods are defined in the \pkg{BiocGenerics} package:
  \describe{
    \item{\code{combine(x=ANY, missing)}}{Return the first (x) argument
      unchanged.}
    \item{\code{combine(data.frame, data.frame)}}{Combines two
      \code{data.frame} objects so that the resulting \code{data.frame}
      contains all rows and columns of the original objects. Rows and
      columns in the returned value are unique, that is, a row or column
      represented in both arguments is represented only once in the
      result. To perform this operation, \code{combine} makes sure that data
      in shared rows and columns are identical in the two
      data.frames. Data differences in shared rows and columns usually cause an
      error. \code{combine} issues a warning when a column is a
      \code{\link{factor}} and the levels of the factor in the two
      data.frames are different.}
    \item{\code{combine(matrix, matrix)}}{Combined two \code{matrix}
      objects so that the resulting \code{matrix} contains all rows and
      columns of the original objects. Both matricies must have
      \code{dimnames}. Rows and columns in the returned
      value are unique, that is, a row or column represented in both
      arguments is represented only once in the result. To perform this
      operation, \code{combine} makes sure that data in shared rows and
      columns are all equal in the two matricies.}
  }
  Additional \code{combine} methods are defined in the \pkg{Biobase} package
  for \link[Biobase]{AnnotatedDataFrame},
  \link[Biobase]{AssayData}, \link[Biobase]{MIAME},
  and \link[Biobase]{eSet} objects.

}

\examples{
data(rse, sce, package = "acidtest")

## SummarizedExperiment ====
x <- rse
colnames(x) <- paste0("sample", seq_len(ncol(x)))

y <- x
colnames(y) <- paste0("sample", seq(from = ncol(y) + 1L, to = ncol(y) * 2L))

## Combine the two objects.
c <- combine(x, y)
print(c)

## SingleCellExperiment ====
x <- sce
colnames(x) <- paste0("cell", seq_len(ncol(x)))

y <- x
colnames(y) <- paste0("cell", seq_len(ncol(y)) + ncol(y))

## Combine the two objects.
c <- combine(x, y)
print(c)
}
\seealso{
\itemize{
\item \code{BiocGenerics::combine()}.
\item \code{help("merge.Matrix", "Matrix.utils")}.
}
}
