% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R,
%   R/convertTranscriptsToGenes-methods.R
\docType{methods}
\name{convertTranscriptsToGenes}
\alias{convertTranscriptsToGenes}
\alias{convertTranscriptsToGenes,character-method}
\alias{convertTranscriptsToGenes,matrix-method}
\alias{convertTranscriptsToGenes,sparseMatrix-method}
\alias{convertTranscriptsToGenes,SummarizedExperiment-method}
\title{Convert transcripts to genes}
\usage{
\S4method{convertTranscriptsToGenes}{character}(object, tx2gene)

\S4method{convertTranscriptsToGenes}{matrix}(object, tx2gene,
  aggregate = TRUE)

\S4method{convertTranscriptsToGenes}{sparseMatrix}(object, tx2gene,
  aggregate = TRUE)

\S4method{convertTranscriptsToGenes}{SummarizedExperiment}(object)
}
\arguments{
\item{object}{Object.}

\item{tx2gene}{\code{Tx2Gene}.
Transcript-to-gene mappings.}

\item{aggregate}{\code{logical(1)}.
For objects supporting \link[base:dim]{dim}, aggregate counts to gene level and
collapse the matrix.}

\item{...}{Passthrough to \code{\link[=makeTx2GeneFromEnsembl]{makeTx2GeneFromEnsembl()}}.}
}
\value{
\itemize{
\item \code{character}: \code{factor}.
Genes in the values, transcripts in the names.
\item \code{matrix}, \code{sparseMatrix}, \code{SummarizedExperiment}:
Object containing counts collapsed to gene level by default
(see \code{aggregate} argument).
}
}
\description{
Convert transcripts to genes
}
\note{
For objects containing a count matrix, the object rows will be
collapsed to gene level using \code{aggregateRows}. This applies to our
\code{SummarizedExperiment} method.
}
\examples{
data(txse, package = "acidtest")
object <- txse

t2g <- Tx2Gene(object)
print(t2g)
transcripts <- rownames(object)
print(transcripts)

## character ====
## Returns as factor.
x <- convertTranscriptsToGenes(transcripts, tx2gene = t2g)
print(x)
str(x)

## matrix ====
## Note that transcript IDs currently must be in the rows.
counts <- counts(object)
print(counts)
## Aggregate to gene level.
x <- convertTranscriptsToGenes(counts, tx2gene = t2g, aggregate = TRUE)
print(x)
colSums(x)
## Simply map to rownames.
x <- convertTranscriptsToGenes(counts, tx2gene = t2g, aggregate = FALSE)
print(x)
colSums(x)

## SummarizedExperiment ====
x <- convertTranscriptsToGenes(object)
print(x)
}
\seealso{
\code{aggregateRows()}.
}
